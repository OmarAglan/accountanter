import 'dart:io';

import 'package:drift/drift.dart';
import 'package:drift/native.dart';
import 'package:path_provider/path_provider.dart';
import 'package:path/path.dart' as p;

// Import the table definition
import 'tables/users.dart';

// This is a "part" file that will be generated by the build_runner.
// It connects this class to the generated code.
part 'database.g.dart';

// Annotate the class as a DriftDatabase.
@DriftDatabase(tables: [Users])
class AppDatabase extends _$AppDatabase {
  // The constructor. The generated class will have a constructor that takes
  // a query executor.
  AppDatabase() : super(_openConnection());

  @override
  int get schemaVersion => 1; // Increment this when you change the schema.

  // --- User-related database methods ---

  /// Gets a single user by their email.
  Future<User?> getUserByEmail(String email) {
    return (select(users)..where((u) => u.email.equals(email))).getSingleOrNull();
  }

  /// Inserts a new user into the database.
  Future<int> insertUser(UsersCompanion user) {
    return into(users).insert(user);
  }
}

// This function defines where the database file will be stored on the device.
LazyDatabase _openConnection() {
  return LazyDatabase(() async {
    final dbFolder = await getApplicationDocumentsDirectory();
    final file = File(p.join(dbFolder.path, 'accountanter.sqlite'));
    return NativeDatabase.createInBackground(file);
  });
}